# Multi-stage build for production-ready Next.js app
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files and npm config
COPY package.json package-lock.json* .npmrc* ./
COPY prisma ./prisma/

# Install all dependencies
RUN npm ci --legacy-peer-deps || npm install --legacy-peer-deps

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Set a dummy DATABASE_URL for build time (Prisma needs it for generation)
ENV DATABASE_URL="mongodb://dummy:dummy@dummy:27017/dummy?authSource=admin"

# Generate Prisma Client
RUN npx prisma generate

# Build the application (allow partial build)
RUN npm run build || echo "Build partially failed, continuing..."

# Production image
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production

# Create user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy all necessary files
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/next.config.js ./next.config.js
COPY --from=builder /app/start.sh ./start.sh

# Create uploads directory with proper permissions
RUN mkdir -p /app/public/uploads && chown -R nextjs:nodejs /app/public/uploads

# Change ownership of .next directory
RUN chown -R nextjs:nodejs /app/.next

# Make start.sh executable and install netcat (while still root)
RUN chmod +x /app/start.sh && apk add --no-cache netcat-openbsd

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Start the server (MongoDB doesn't use migrations)
CMD ["./start.sh"]